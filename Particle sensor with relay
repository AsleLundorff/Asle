int stage;
int particles;
int incomingByte = 0;   // for incoming serial data
int previousStage;
//const byte ledPin = LED_BUILTIN;    //debug with built in LED
const byte ledPin = 4;                // connected to S terminal of Relay

// For UNO and others without hardware serial, we must use software serial...
// pin #2 is IN from sensor (TX pin on sensor), leave pin #3 disconnected
// comment these two lines if using hardware serial
#include <SoftwareSerial.h>
SoftwareSerial pmsSerial(2,3);

void setup() {
  Serial.begin(115200); // our debugging output
  pmsSerial.begin(9600); // sensor baud rate is 9600   
  pinMode(ledPin, OUTPUT);
//  particles = 1000;    //for debugging and simulating
}

struct pms5003data {
  uint16_t framelen;
  uint16_t pm10_standard, pm25_standard, pm100_standard;
  uint16_t pm10_env, pm25_env, pm100_env;
  uint16_t particles_03um, particles_05um, particles_10um, particles_25um, particles_50um, particles_100um;
  uint16_t unused;
  uint16_t checksum;
};

struct pms5003data data;

void loop (){
  if (readPMSdata(&pmsSerial)) {
      particles = data.particles_03um + data.particles_05um*8 + data.particles_10um*37;
      Serial.print("particles =");
      Serial.print(particles);
      Serial.println();
  }

  if (4000 <= particles ) {
    stage = 1;
  }

  else if (2000 <= particles && particles < 4000) {
    stage = 2;  
  }

  else if (0 <= particles && particles < 1000) {
    stage = 3;
  }

  else {
    Serial.println("else");
  }
 
 if (stage != previousStage){

    switch(stage) {
      
    case 1:
       for (int i=0; i <= 1; i++) {             // needs to be 3 to blink 4 times (0,1,2,3)
        Serial.println("stage 1");
            digitalWrite(ledPin, HIGH);
            delay(300);
            digitalWrite(ledPin, LOW);
            delay(300);
          }
        Serial.println("break");
        digitalWrite(ledPin, HIGH);
        delay(500);
        previousStage = stage;
        break;
     
    case 2:
       for (int i=0; i <= 1; i++) {             // needs to be 3 to blink 4 times (0,1,2,3)
        Serial.println("stage 2");
            digitalWrite(ledPin, HIGH);
            delay(300);
            digitalWrite(ledPin, LOW);
            delay(300);
          }
        Serial.println("break");
        digitalWrite(ledPin, HIGH);
        delay(500);
        digitalWrite(ledPin, LOW);
        delay(500);
        digitalWrite(ledPin, HIGH);
        delay(500);
        previousStage = stage;
        break;
         
    case 3:
       for (int i=0; i <= 1; i++) {             // needs to be 3 to blink 4 times (0,1,2,3)
        Serial.println("stage 3");
            digitalWrite(ledPin, HIGH);
            delay(300);
            digitalWrite(ledPin, LOW);
            delay(300);
          }
        Serial.println("break");
        digitalWrite(ledPin, HIGH);
        delay(500);
        digitalWrite(ledPin, LOW);
        delay(500);
        digitalWrite(ledPin, HIGH);
        delay(500);
        digitalWrite(ledPin, LOW);
        delay(500);
        digitalWrite(ledPin, HIGH);
        delay(500);
        previousStage = stage;
        break;
    
    default:
        // turn all the LEDs off:
        digitalWrite(ledPin, LOW);
    }
  }
}

boolean readPMSdata(Stream *s) {
  if (! s->available()) {
    return false;
  }
  
  // Read a byte at a time until we get to the special '0x42' start-byte
  if (s->peek() != 0x42) {
    s->read();
    return false;
  }

  // Now read all 32 bytes
  if (s->available() < 32) {
    return false;
  }
    
  uint8_t buffer[32];    
  uint16_t sum = 0;
  s->readBytes(buffer, 32);

  // get checksum ready
  for (uint8_t i=0; i<30; i++) {
    sum += buffer[i];
  }

  /* debugging
  for (uint8_t i=2; i<32; i++) {
    Serial.print("0x"); Serial.print(buffer[i], HEX); Serial.print(", ");
  }
  Serial.println();
  */
  
  // The data comes in endian'd, this solves it so it works on all platforms
  uint16_t buffer_u16[15];
  for (uint8_t i=0; i<15; i++) {
    buffer_u16[i] = buffer[2 + i*2 + 1];
    buffer_u16[i] += (buffer[2 + i*2] << 8);
  }

  // put it into a nice struct :)
  memcpy((void *)&data, (void *)buffer_u16, 30);

  if (sum != data.checksum) {
    Serial.println("Checksum failure");
    return false;
  }
  // success!
  return true;
}
